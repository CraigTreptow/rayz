defmodule Mix.Tasks.Clock do
  use Mix.Task

  @shortdoc "Generates a clock face"
  @moduledoc @shortdoc

  @impl Mix.Task
  def run(_args) do
    clock()
  end

  def clock() do
    canvas = Builder.canvas(20, 20)
    origin = Builder.point(10, 10, 10)
    red    = Builder.color(1, 0, 0)
    green  = Builder.color(0, 1, 0)
    blue  = Builder.color(0, 0, 1)
    radius = 3 / 8

    twelve = Builder.point(0, 0, 1)
    three  = Builder.point(1, 0, 0)

    #rotation = compute_rotation(3)
    computed_three = 
      3
      |> compute_rotation
      |> compute_point

    c_three = Rayz.Matrix.multiply(rotation_3, twelve)
    computed_three = Rayz.Tuple.add(c_three, origin)
    computed_six = Rayz.Matrix.multiply(rotation_6, twelve)

    IO.inspect twelve
    IO.inspect three
    IO.inspect computed_three

    canvas
    |> Rayz.Canvas.write_pixel(origin.x, origin.y, red)
    |> Rayz.Canvas.write_pixel(Kernel.round(0 * radius), Kernel.round(19 * radius), green)
    #|> Rayz.Canvas.write_pixel(Kernel.round(twelve.x), Kernel.round(twelve.y), red)
    #|> Rayz.Canvas.write_pixel(Kernel.round(three.x), Kernel.round(three.y), red)
    |> Rayz.Canvas.write_pixel(Kernel.round(computed_three.x), Kernel.round(computed_three.y), blue)
    #|> Rayz.Canvas.write_pixel(Kernel.round(computed_six.x), Kernel.round(computed_six.y), red)
    |> Rayz.Canvas.canvas_to_ppm

    IO.puts("Assuming OSX, opening PPM file for you")
    System.cmd("open", ["rayz.ppm"])
  end

  defp compute_rotation(hour) do
    Builder.rotation_y(hour * (:math.pi() / 6))
  end

  defp compute_point(rotation) do
    origin = Builder.point(10, 10, 10)
    twelve = Builder.point(0, 0, 1)

    rotation
    |> Rayz.Matrix.multiply(rotation, twelve)
    |> Rayz.Tuple.add(origin)
  end
end
