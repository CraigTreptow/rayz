defmodule Mix.Tasks.Sphere do
  use Mix.Task

  @shortdoc "Cast rays at a sphere"
  @moduledoc @shortdoc

  @impl Mix.Task
  def run(_args) do
    cast()
  end

  def cast() do
    canvas_pixels = 100
    canvas = Builder.canvas(canvas_pixels, canvas_pixels)
    red    = Builder.color(1, 0, 0)
    shape  = Builder.sphere()

    # start the ray at z = -5
    ray_origin = Builder.point(0, 0, -5)
    # put the wall at z = 10
    wall_z     = 10
    wall_size  = 7.0
    pixel_size = wall_size / canvas_pixels
    # the wall is centered around the origin
    # (because the sphere is at the origin)
    # so 'half' is the minium and maximum x & y coordinates of wall
    half = wall_size / 2

    ################################################################
    for y <- 1..canvas_pixels - 15 do
      # compute the world y coordinate (top = +half, bottom = -half)
      world_y = half - pixel_size * y

      IO.inspect (
        for x <- 1..canvas_pixels - 1 do 
          # compute the world x coordinate (left = -half, right = half)
          world_x = -half + pixel_size * x
          # describe the point on the wall that the ray will target
          position = Builder.point(world_x, world_y, wall_z)

          new_position = Rayz.Tuple.subtract(position, ray_origin)
          r = Builder.ray(ray_origin, Rayz.Tuple.normalize(new_position))
          xs = Rayz.Intersection.intersect(shape, r)

          hit = Rayz.Intersection.hit(xs)
          if hit != nil do
            { hit }
          end

            #if hit != nil do
            #  %{y: y,
            #    x: x,
            #    world_y: world_y,
            #    world_x: world_x,
            #    position: position,
            #    hit: hit
            #  }
            #end
        end
      )
    end
    ################################################################

    # # for each row of pixels in the canvas
    # something =for y <- 0..canvas_pixels - 1 do
    #   # compute the world y coordinate (top = +half, bottom = -half)
    #   world_y = half - pixel_size * y

    #   # for each pixel in the row
    #   for x <- 0..canvas_pixels - 1 do
    #     # compute the world x coordinate (left = -half, right = half)
    #     world_x = -half + pixel_size * x

    #     # describe the point on the wall that the ray will target
    #     position = Builder.point(world_x, world_y, wall_z)

    #     new_position = Rayz.Tuple.subtract(position, ray_origin)
    #     r = Builder.ray(ray_origin, Rayz.Tuple.normalize(new_position))
    #     xs = Rayz.Intersection.intersect(shape, r)

    #     hit = Rayz.Intersection.hit(xs)

    #     if hit != nil do
    #       {x, y}
    #       #update_canvas(x, y, red)
    #       #Rayz.Canvas.write_pixel(canvas, x, y, red)
    #     end
    #   end
    # end

    #TODO spawn a Agent process to do each row independantly
    # something is list of lists
    #something
    #|> Enum.map(fn row -> process_row(row) end)

    #1..12
    #|> Enum.to_list
    #|> Enum.map(fn hour -> compute_point(hour, size, origin, radius) end)
    #|> update_canvas(canvas, red)
    #|> Rayz.Canvas.canvas_to_ppm

    #IO.puts("Assuming OSX, opening PPM file for you")
    #System.cmd("open", ["rayz.ppm"])
  end

  # def process_row([head|tail]) do
  #   Enum.map(fn col -> IO.inspect(col) end)
  # end

  # def process_col(nil), do: nil
  # def process_col({x, y}) do
  #   IO.puts("X: #{x} Y: #{y}")
  # end

  # def update_canvas(nil, canvas, _color), do: canvas
  # def update_canvas(canvas, {x, y}, color) do
  #   new_canvas = Rayz.Canvas.write_pixel(canvas, x, y, color)
  #   update_canvas(tail, new_canvas, color)
  # end
end
